"""
Упражнение 131. Инфиксная запись – в постфиксную.
Используйте свои наработки из упражнений 129 и 130 для разделения математических выражений на лексемы и поиска в них
унарных операторов. После этого используйте алгоритм, приведенный выше, для преобразования выражения из инфиксной формы
в постфиксную. Код, реализующий этот алгоритм, должен быть заключен в функцию, принимающую на вход список лексем
инфиксного выражения. Возвращать функция будет список лексем в постфиксном
выражении. В основной программе продемонстрируйте работу функции по преобразованию инфиксной формы записи
математического выражения в постфиксную. Запросите у пользователя выражение инфиксного типа и выведите на экран
его постфиксный аналог.
"""

# Сначала проверьте, удовлетворяет ли вас результат программы, прежде чем её копировать.
import re

# уровень приоритета поддерживаемых операторов
PRECEDENCE = {
    '^': 4,  # самый высокий уровень приоритета
    '*': 3,
    '/': 3,
    '+': 2,
    '-': 2,
    '(': 1,
}


def infixToPostfix(expr):
    tokens = re.findall(r"(\b\w*[\.]?\w+\b|[\(\)\^\+\*\-\/])", expr)
    stack = []
    postfix = []

    for token in tokens:
        # Если токен является операндом, то не помещайте его в стек.
        # Вместо этого передайте его в выходные данные.
        if token.isalnum():
            postfix.append(token)

        # Если ваш текущий токен заключен в правую круглую скобку
        # поместите его в стек
        elif token == '(':
            stack.append(token)

        # Если ваш текущий токен заключен в правую круглую скобку,
        # расширяйте стек до тех пор, пока не останется первая левая круглая скобка.
        # Выведите все символы, кроме круглых скобок.
        elif token == ')':
            top = stack.pop()
            while top != '(':
                postfix.append(top)
                top = stack.pop()

        # Прежде чем вы сможете поместить оператор в стек,
        # вы должны просмотреть стек, пока не найдете оператор
        # с более низким приоритетом, чем у текущего оператора.
        # Извлеченные элементы стека записываются в выходные данные.
        else:
            while stack and (PRECEDENCE[stack[-1]] >= PRECEDENCE[token]):
                postfix.append(stack.pop())
            stack.append(token)

    # После того, как все выражение будет проверено,
    # извлеките оставшуюся часть стека
    # и запишите операторы из стека в выходные данные.
    while stack:
        postfix.append(stack.pop())
    return postfix


# конвертация

def main():
    expressions = input("Введите инфиксное выражение без пробелов: ")
    print("Постфиксный результат: ", infixToPostfix(expressions))

if __name__ == '__main__':
    main()

